// Package configf comment
// This file was generated by tars2go 1.1.4
// Generated from ConfigF.tars
package configf

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// ConfigInfo struct implement
type ConfigInfo struct {
	Appname     string `json:"appname"`
	Servername  string `json:"servername"`
	Filename    string `json:"filename"`
	BAppOnly    bool   `json:"bAppOnly"`
	Host        string `json:"host"`
	Setdivision string `json:"setdivision"`
}

func (st *ConfigInfo) ResetDefault() {
	st.BAppOnly = false
}

//ReadFrom reads  from _is and put into struct.
func (st *ConfigInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Appname, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Servername, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Filename, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BAppOnly, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Host, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Setdivision, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ConfigInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	have, err = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ConfigInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ConfigInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Appname, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Servername, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Filename, 2)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BAppOnly, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Host, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Setdivision, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ConfigInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetConfigListInfo struct implement
type GetConfigListInfo struct {
	Appname       string `json:"appname"`
	Servername    string `json:"servername"`
	BAppOnly      bool   `json:"bAppOnly"`
	Host          string `json:"host"`
	Setdivision   string `json:"setdivision"`
	Containername string `json:"containername"`
}

func (st *GetConfigListInfo) ResetDefault() {
	st.BAppOnly = false
	st.Host = ""
	st.Setdivision = ""
	st.Containername = ""
}

//ReadFrom reads  from _is and put into struct.
func (st *GetConfigListInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Appname, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Servername, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.BAppOnly, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Host, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Setdivision, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Containername, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetConfigListInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	have, err = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetConfigListInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetConfigListInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Appname, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Servername, 1)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.BAppOnly, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Host, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Setdivision, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Containername, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetConfigListInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

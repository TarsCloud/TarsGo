// Package configf comment
// This file was generated by tars2go 2.0.0
// Generated from ConfigF.tars
package configf

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// ConfigInfo struct implement
type ConfigInfo struct {
	Appname     string `json:"appname"`
	Servername  string `json:"servername"`
	Filename    string `json:"filename"`
	BAppOnly    bool   `json:"bAppOnly"`
	Host        string `json:"host"`
	Setdivision string `json:"setdivision"`
}

func (st *ConfigInfo) ResetDefault() {
	st.BAppOnly = false
}

// ReadFrom reads  from readBuf and put into struct.
func (st *ConfigInfo) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Appname, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Servername, 1, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Filename, 2, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadBool(&st.BAppOnly, 3, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Host, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Setdivision, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *ConfigInfo) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ConfigInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *ConfigInfo) WriteTo(buf *codec.Buffer) error {
	var err error

	err = buf.WriteString(st.Appname, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Servername, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Filename, 2)
	if err != nil {
		return err
	}

	err = buf.WriteBool(st.BAppOnly, 3)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Host, 4)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Setdivision, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

// WriteBlock encode struct
func (st *ConfigInfo) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetConfigListInfo struct implement
type GetConfigListInfo struct {
	Appname       string `json:"appname"`
	Servername    string `json:"servername"`
	BAppOnly      bool   `json:"bAppOnly"`
	Host          string `json:"host"`
	Setdivision   string `json:"setdivision"`
	Containername string `json:"containername"`
}

func (st *GetConfigListInfo) ResetDefault() {
	st.BAppOnly = false
	st.Host = ""
	st.Setdivision = ""
	st.Containername = ""
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetConfigListInfo) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Appname, 0, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Servername, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadBool(&st.BAppOnly, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Host, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Setdivision, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Containername, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetConfigListInfo) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetConfigListInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetConfigListInfo) WriteTo(buf *codec.Buffer) error {
	var err error

	err = buf.WriteString(st.Appname, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Servername, 1)
	if err != nil {
		return err
	}

	err = buf.WriteBool(st.BAppOnly, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Host, 3)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Setdivision, 4)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Containername, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

// WriteBlock encode struct
func (st *GetConfigListInfo) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

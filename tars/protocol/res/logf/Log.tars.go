// Package logf comment
// This file was generated by tars2go 1.1.4
// Generated from LogF.tars
package logf

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//Log struct
type Log struct {
	s m.Servant
}

//Logger is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) Logger(app string, server string, file string, format string, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(app, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(file, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(format, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "logger", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoggerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) LoggerWithContext(tarsCtx context.Context, app string, server string, file string, format string, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(app, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(file, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(format, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "logger", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoggerOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) LoggerOneWayWithContext(tarsCtx context.Context, app string, server string, file string, format string, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(app, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(file, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(format, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "logger", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoggerbyInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) LoggerbyInfo(info *LogInfo, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "loggerbyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoggerbyInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) LoggerbyInfoWithContext(tarsCtx context.Context, info *LogInfo, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "loggerbyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//LoggerbyInfoOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Log) LoggerbyInfoOneWayWithContext(tarsCtx context.Context, info *LogInfo, buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(buffer)), 0)
	if err != nil {
		return err
	}

	for _, v := range buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "loggerbyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *Log) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *Log) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *Log) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

type _impLog interface {
	Logger(app string, server string, file string, format string, buffer []string) (err error)
	LoggerbyInfo(info *LogInfo, buffer []string) (err error)
}
type _impLogWithContext interface {
	Logger(tarsCtx context.Context, app string, server string, file string, format string, buffer []string) (err error)
	LoggerbyInfo(tarsCtx context.Context, info *LogInfo, buffer []string) (err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *Log) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "logger":
		var app string
		var server string
		var file string
		var format string
		var buffer []string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&app, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&server, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&file, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&format, 4, true)
			if err != nil {
				return err
			}

			_, ty, err = _is.SkipToNoCheck(5, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				buffer = make([]string, length)
				for i0, e0 := int32(0), length; i0 < e0; i0++ {

					err = _is.Read_string(&buffer[i0], 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("app", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&app, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("server", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&server, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("file", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&file, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("format", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&format, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("buffer", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			_, ty, err = _is.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				buffer = make([]string, length)
				for i1, e1 := int32(0), length; i1 < e1; i1++ {

					err = _is.Read_string(&buffer[i1], 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["app"])
				if err = json.Unmarshal([]byte(_jsonStr_), &app); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["server"])
				if err = json.Unmarshal([]byte(_jsonStr_), &server); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["file"])
				if err = json.Unmarshal([]byte(_jsonStr_), &file); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["format"])
				if err = json.Unmarshal([]byte(_jsonStr_), &format); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["buffer"])
				if err = json.Unmarshal([]byte(_jsonStr_), &buffer); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		if !_withContext {
			_imp := _val.(_impLog)
			err = _imp.Logger(app, server, file, format, buffer)
		} else {
			_imp := _val.(_impLogWithContext)
			err = _imp.Logger(tarsCtx, app, server, file, format, buffer)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "loggerbyInfo":
		var info LogInfo
		var buffer []string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = info.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			_, ty, err = _is.SkipToNoCheck(2, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				buffer = make([]string, length)
				for i2, e2 := int32(0), length; i2 < e2; i2++ {

					err = _is.Read_string(&buffer[i2], 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("info", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = info.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("buffer", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			_, ty, err = _is.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				buffer = make([]string, length)
				for i3, e3 := int32(0), length; i3 < e3; i3++ {

					err = _is.Read_string(&buffer[i3], 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["info"])
				info.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &info); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["buffer"])
				if err = json.Unmarshal([]byte(_jsonStr_), &buffer); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		if !_withContext {
			_imp := _val.(_impLog)
			err = _imp.LoggerbyInfo(&info, buffer)
		} else {
			_imp := _val.(_impLogWithContext)
			err = _imp.LoggerbyInfo(tarsCtx, &info, buffer)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}

//
// This file war generated by FastTars2go 1.0
// Generated from LogF.tars
// Tencent.

package logf

import (
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"unsafe"
)

type Log struct {
	s m.Servant
}

func (_obj *Log) Logger(App string, Server string, File string, Format string, Buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(App, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(Server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(File, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(Format, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(Buffer)), 0)
	if err != nil {
		return err
	}
	for _, v := range Buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "logger", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func (_obj *Log) LoggerbyInfo(Info *LogInfo, Buffer []string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(Buffer)), 0)
	if err != nil {
		return err
	}
	for _, v := range Buffer {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "loggerbyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

func (_obj *Log) SetServant(s m.Servant) {
	_obj.s = s
}

func (_obj *Log) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

func (_obj *Log) byteToInt8(s []byte) []int8 {
	d := *(*[]int8)(unsafe.Pointer(&s))
	return d
}
func (_obj *Log) int8ToByte(s []int8) []byte {
	d := *(*[]byte)(unsafe.Pointer(&s))
	return d
}

type _impLog interface {
	Logger(App string, Server string, File string, Format string, Buffer []string) (err error)
	LoggerbyInfo(Info *LogInfo, Buffer []string) (err error)
}

func (_obj *Log) Dispatch(_val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(_obj.int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	_imp := _val.(_impLog)
	switch req.SFuncName {
	case "logger":
		var App string
		err = _is.Read_string(&App, 1, true)
		if err != nil {
			return err
		}
		var Server string
		err = _is.Read_string(&Server, 2, true)
		if err != nil {
			return err
		}
		var File string
		err = _is.Read_string(&File, 3, true)
		if err != nil {
			return err
		}
		var Format string
		err = _is.Read_string(&Format, 4, true)
		if err != nil {
			return err
		}
		var Buffer []string
		err, have, ty = _is.SkipToNoCheck(5, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			Buffer = make([]string, length, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_string(&Buffer[i0], 0, false)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("type not support SIMPLE_LIST.")
			if err != nil {
				return err
			}
		} else {
			err = fmt.Errorf("require vector, but not.")
			if err != nil {
				return err
			}
		}
		err := _imp.Logger(App, Server, File, Format, Buffer)
		if err != nil {
			return err
		}
	case "loggerbyInfo":
		var Info LogInfo
		err = Info.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}
		var Buffer []string
		err, have, ty = _is.SkipToNoCheck(2, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			Buffer = make([]string, length, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = _is.Read_string(&Buffer[i1], 0, false)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("type not support SIMPLE_LIST.")
			if err != nil {
				return err
			}
		} else {
			err = fmt.Errorf("require vector, but not.")
			if err != nil {
				return err
			}
		}
		err := _imp.LoggerbyInfo(&Info, Buffer)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var status map[string]string
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      _obj.byteToInt8(_os.ToBytes()),
		Status:       status,
		SResultDesc:  "",
		Context:      req.Context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Package propertyf comment
// This file war generated by tars2go 1.1
// Generated from PropertyF.tars
package propertyf

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//StatPropMsgHead strcut implement
type StatPropMsgHead struct {
	ModuleName   string `json:"moduleName"`
	Ip           string `json:"ip"`
	PropertyName string `json:"propertyName"`
	SetName      string `json:"setName"`
	SetArea      string `json:"setArea"`
	SetID        string `json:"setID"`
	SContainer   string `json:"sContainer"`
	IPropertyVer int32  `json:"iPropertyVer"`
}

func (st *StatPropMsgHead) resetDefault() {
	st.IPropertyVer = 1
}

//ReadFrom reads  from _is and put into struct.
func (st *StatPropMsgHead) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err = _is.Read_string(&st.ModuleName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Ip, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.PropertyName, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SetName, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SetArea, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SetID, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SContainer, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IPropertyVer, 7, false)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *StatPropMsgHead) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require StatPropMsgHead, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *StatPropMsgHead) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.ModuleName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Ip, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.PropertyName, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SetName, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SetArea, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SetID, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SContainer, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IPropertyVer, 7)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *StatPropMsgHead) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

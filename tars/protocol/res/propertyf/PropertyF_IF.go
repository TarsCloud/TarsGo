//
// This file war generated by FastTars2go 1.0
// Generated from PropertyF.tars
// Tencent.

package propertyf

import (
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"unsafe"
)

type PropertyF struct {
	s m.Servant
}

func (_obj *PropertyF) ReportPropMsg(Statmsg map[StatPropMsgHead]StatPropMsgBody, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(Statmsg)), 0)
	if err != nil {
		return ret, err
	}
	for k1, v1 := range Statmsg {

		err = k1.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "reportPropMsg", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

func (_obj *PropertyF) SetServant(s m.Servant) {
	_obj.s = s
}

func (_obj *PropertyF) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

func (_obj *PropertyF) byteToInt8(s []byte) []int8 {
	d := *(*[]int8)(unsafe.Pointer(&s))
	return d
}
func (_obj *PropertyF) int8ToByte(s []int8) []byte {
	d := *(*[]byte)(unsafe.Pointer(&s))
	return d
}

type _impPropertyF interface {
	ReportPropMsg(Statmsg map[StatPropMsgHead]StatPropMsgBody) (ret int32, err error)
}

func (_obj *PropertyF) Dispatch(_val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(_obj.int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	_imp := _val.(_impPropertyF)
	switch req.SFuncName {
	case "reportPropMsg":
		var Statmsg map[StatPropMsgHead]StatPropMsgBody
		err, have = _is.SkipTo(codec.MAP, 1, true)
		if err != nil {
			return err
		}

		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		Statmsg = make(map[StatPropMsgHead]StatPropMsgBody)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {
			var k2 StatPropMsgHead
			var v2 StatPropMsgBody

			err = k2.ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

			err = v2.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			Statmsg[k2] = v2
		}
		ret, err := _imp.ReportPropMsg(Statmsg)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var status map[string]string
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      _obj.byteToInt8(_os.ToBytes()),
		Status:       status,
		SResultDesc:  "",
		Context:      req.Context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}

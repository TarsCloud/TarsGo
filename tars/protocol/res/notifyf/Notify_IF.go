//Package notifyf comment
// This file war generated by tars2go 1.1
// Generated from NotifyF.tars
package notifyf

import (
	"context"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//Notify struct
type Notify struct {
	s m.Servant
}

//ReportServer is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportServer(SServerName string, SThreadId string, SMessage string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(SServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(SThreadId, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(SMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "reportServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportServerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportServerWithContext(ctx context.Context, SServerName string, SThreadId string, SMessage string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(SServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(SThreadId, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(SMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "reportServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//NotifyServer is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) NotifyServer(SServerName string, Level NOTIFYLEVEL, SMessage string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(SServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(Level), 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(SMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "notifyServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//NotifyServerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) NotifyServerWithContext(ctx context.Context, SServerName string, Level NOTIFYLEVEL, SMessage string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(SServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(Level), 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(SMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "notifyServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetNotifyInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) GetNotifyInfo(StKey *NotifyKey, StInfo *NotifyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = StKey.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "getNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*StInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetNotifyInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) GetNotifyInfoWithContext(ctx context.Context, StKey *NotifyKey, StInfo *NotifyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = StKey.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "getNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*StInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ReportNotifyInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportNotifyInfo(Info *ReportInfo, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "reportNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportNotifyInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportNotifyInfoWithContext(ctx context.Context, Info *ReportInfo, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "reportNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *Notify) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *Notify) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

type _impNotify interface {
	ReportServer(SServerName string, SThreadId string, SMessage string) (err error)
	NotifyServer(SServerName string, Level NOTIFYLEVEL, SMessage string) (err error)
	GetNotifyInfo(StKey *NotifyKey, StInfo *NotifyInfo) (ret int32, err error)
	ReportNotifyInfo(Info *ReportInfo) (err error)
}
type _impNotifyWithContext interface {
	ReportServer(ctx context.Context, SServerName string, SThreadId string, SMessage string) (err error)
	NotifyServer(ctx context.Context, SServerName string, Level NOTIFYLEVEL, SMessage string) (err error)
	GetNotifyInfo(ctx context.Context, StKey *NotifyKey, StInfo *NotifyInfo) (ret int32, err error)
	ReportNotifyInfo(ctx context.Context, Info *ReportInfo) (err error)
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *Notify) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "reportServer":
		var SServerName string
		err = _is.Read_string(&SServerName, 1, true)
		if err != nil {
			return err
		}
		var SThreadId string
		err = _is.Read_string(&SThreadId, 2, true)
		if err != nil {
			return err
		}
		var SMessage string
		err = _is.Read_string(&SMessage, 3, true)
		if err != nil {
			return err
		}
		if withContext == false {
			_imp := _val.(_impNotify)
			err = _imp.ReportServer(SServerName, SThreadId, SMessage)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.ReportServer(ctx, SServerName, SThreadId, SMessage)
			if err != nil {
				return err
			}
		}
	case "notifyServer":
		var SServerName string
		err = _is.Read_string(&SServerName, 1, true)
		if err != nil {
			return err
		}
		var Level NOTIFYLEVEL
		err = _is.Read_int32((*int32)(&Level), 2, true)
		if err != nil {
			return err
		}
		var SMessage string
		err = _is.Read_string(&SMessage, 3, true)
		if err != nil {
			return err
		}
		if withContext == false {
			_imp := _val.(_impNotify)
			err = _imp.NotifyServer(SServerName, Level, SMessage)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.NotifyServer(ctx, SServerName, Level, SMessage)
			if err != nil {
				return err
			}
		}
	case "getNotifyInfo":
		var StKey NotifyKey
		err = StKey.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}
		var StInfo NotifyInfo
		if withContext == false {
			_imp := _val.(_impNotify)
			ret, err := _imp.GetNotifyInfo(&StKey, &StInfo)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impNotifyWithContext)
			ret, err := _imp.GetNotifyInfo(ctx, &StKey, &StInfo)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		}

		err = StInfo.WriteBlock(_os, 2)
		if err != nil {
			return err
		}
	case "reportNotifyInfo":
		var Info ReportInfo
		err = Info.ReadBlock(_is, 1, true)
		if err != nil {
			return err
		}
		if withContext == false {
			_imp := _val.(_impNotify)
			err = _imp.ReportNotifyInfo(&Info)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.ReportNotifyInfo(ctx, &Info)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}

// Package notifyf comment
// This file was generated by tars2go 1.1.5
// Generated from NotifyF.tars
package notifyf

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//Notify struct
type Notify struct {
	s m.Servant
}

//ReportServer is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportServer(sServerName string, sThreadId string, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(sThreadId, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "reportServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportServerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportServerWithContext(tarsCtx context.Context, sServerName string, sThreadId string, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(sThreadId, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "reportServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportServerOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportServerOneWayWithContext(tarsCtx context.Context, sServerName string, sThreadId string, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(sThreadId, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "reportServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//NotifyServer is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) NotifyServer(sServerName string, level NOTIFYLEVEL, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(level), 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "notifyServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//NotifyServerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) NotifyServerWithContext(tarsCtx context.Context, sServerName string, level NOTIFYLEVEL, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(level), 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "notifyServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//NotifyServerOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) NotifyServerOneWayWithContext(tarsCtx context.Context, sServerName string, level NOTIFYLEVEL, sMessage string, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = _os.Write_string(sServerName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(level), 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(sMessage, 3)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "notifyServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetNotifyInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) GetNotifyInfo(stKey *NotifyKey, stInfo *NotifyInfo, _opt ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = stKey.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*stInfo).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "getNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*stInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetNotifyInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) GetNotifyInfoWithContext(tarsCtx context.Context, stKey *NotifyKey, stInfo *NotifyInfo, _opt ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = stKey.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*stInfo).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "getNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*stInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetNotifyInfoOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) GetNotifyInfoOneWayWithContext(tarsCtx context.Context, stKey *NotifyKey, stInfo *NotifyInfo, _opt ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = stKey.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*stInfo).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "getNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ReportNotifyInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportNotifyInfo(info *ReportInfo, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "reportNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportNotifyInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportNotifyInfoWithContext(tarsCtx context.Context, info *ReportInfo, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "reportNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReportNotifyInfoOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Notify) ReportNotifyInfoOneWayWithContext(tarsCtx context.Context, info *ReportInfo, _opt ...map[string]string) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_os := codec.NewBuffer()
	err = info.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "reportNotifyInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *Notify) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *Notify) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *Notify) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

type _impNotify interface {
	ReportServer(sServerName string, sThreadId string, sMessage string) (err error)
	NotifyServer(sServerName string, level NOTIFYLEVEL, sMessage string) (err error)
	GetNotifyInfo(stKey *NotifyKey, stInfo *NotifyInfo) (ret int32, err error)
	ReportNotifyInfo(info *ReportInfo) (err error)
}
type _impNotifyWithContext interface {
	ReportServer(tarsCtx context.Context, sServerName string, sThreadId string, sMessage string) (err error)
	NotifyServer(tarsCtx context.Context, sServerName string, level NOTIFYLEVEL, sMessage string) (err error)
	GetNotifyInfo(tarsCtx context.Context, stKey *NotifyKey, stInfo *NotifyInfo) (ret int32, err error)
	ReportNotifyInfo(tarsCtx context.Context, info *ReportInfo) (err error)
}

// Dispatch is used to call the server side implement for the method defined in the tars file. _withContext shows using context or not.
func (_obj *Notify) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "reportServer":
		var sServerName string
		var sThreadId string
		var sMessage string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&sServerName, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&sThreadId, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&sMessage, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("sServerName", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&sServerName, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("sThreadId", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&sThreadId, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("sMessage", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&sMessage, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["sServerName"])
				if err = json.Unmarshal([]byte(_jsonStr_), &sServerName); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["sThreadId"])
				if err = json.Unmarshal([]byte(_jsonStr_), &sThreadId); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["sMessage"])
				if err = json.Unmarshal([]byte(_jsonStr_), &sMessage); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		if !_withContext {
			_imp := _val.(_impNotify)
			err = _imp.ReportServer(sServerName, sThreadId, sMessage)
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.ReportServer(tarsCtx, sServerName, sThreadId, sMessage)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "notifyServer":
		var sServerName string
		var level NOTIFYLEVEL
		var sMessage string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&sServerName, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32((*int32)(&level), 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&sMessage, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("sServerName", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&sServerName, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("level", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32((*int32)(&level), 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("sMessage", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&sMessage, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["sServerName"])
				if err = json.Unmarshal([]byte(_jsonStr_), &sServerName); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["level"])
				if err = json.Unmarshal([]byte(_jsonStr_), &level); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["sMessage"])
				if err = json.Unmarshal([]byte(_jsonStr_), &sMessage); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		if !_withContext {
			_imp := _val.(_impNotify)
			err = _imp.NotifyServer(sServerName, level, sMessage)
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.NotifyServer(tarsCtx, sServerName, level, sMessage)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "getNotifyInfo":
		var stKey NotifyKey
		var stInfo NotifyInfo

		if tarsReq.IVersion == basef.TARSVERSION {

			err = stKey.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("stKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = stKey.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["stKey"])
				stKey.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &stKey); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if !_withContext {
			_imp := _val.(_impNotify)
			_funRet_, err = _imp.GetNotifyInfo(&stKey, &stInfo)
		} else {
			_imp := _val.(_impNotifyWithContext)
			_funRet_, err = _imp.GetNotifyInfo(tarsCtx, &stKey, &stInfo)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = stInfo.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = stInfo.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("stInfo", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["stInfo"] = stInfo

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "reportNotifyInfo":
		var info ReportInfo

		if tarsReq.IVersion == basef.TARSVERSION {

			err = info.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("info", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = info.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["info"])
				info.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &info); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		if !_withContext {
			_imp := _val.(_impNotify)
			err = _imp.ReportNotifyInfo(&info)
		} else {
			_imp := _val.(_impNotifyWithContext)
			err = _imp.ReportNotifyInfo(tarsCtx, &info)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}

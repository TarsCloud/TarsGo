//Package statf comment
// This file war generated by tars2go 1.1
// Generated from StatF.tars
package statf

import (
	"context"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//StatF struct
type StatF struct {
	s m.Servant
}

//ReportMicMsg is the proxy function for the method defined in the tars file, with the context
func (_obj *StatF) ReportMicMsg(Msg map[StatMicMsgHead]StatMicMsgBody, BFromClient bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(Msg)), 0)
	if err != nil {
		return ret, err
	}
	for k0, v0 := range Msg {

		err = k0.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

		err = v0.WriteBlock(_os, 1)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_bool(BFromClient, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "reportMicMsg", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ReportMicMsgWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *StatF) ReportMicMsgWithContext(ctx context.Context, Msg map[StatMicMsgHead]StatMicMsgBody, BFromClient bool, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(Msg)), 0)
	if err != nil {
		return ret, err
	}
	for k1, v1 := range Msg {

		err = k1.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

		err = v1.WriteBlock(_os, 1)
		if err != nil {
			return ret, err
		}
	}

	err = _os.Write_bool(BFromClient, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "reportMicMsg", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ReportSampleMsg is the proxy function for the method defined in the tars file, with the context
func (_obj *StatF) ReportSampleMsg(Msg []StatSampleMsg, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(Msg)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range Msg {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "reportSampleMsg", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ReportSampleMsgWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *StatF) ReportSampleMsgWithContext(ctx context.Context, Msg []StatSampleMsg, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(Msg)), 0)
	if err != nil {
		return ret, err
	}
	for _, v := range Msg {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "reportSampleMsg", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *StatF) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *StatF) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

type _impStatF interface {
	ReportMicMsg(Msg map[StatMicMsgHead]StatMicMsgBody, BFromClient bool) (ret int32, err error)
	ReportSampleMsg(Msg []StatSampleMsg) (ret int32, err error)
}
type _impStatFWithContext interface {
	ReportMicMsg(ctx context.Context, Msg map[StatMicMsgHead]StatMicMsgBody, BFromClient bool) (ret int32, err error)
	ReportSampleMsg(ctx context.Context, Msg []StatSampleMsg) (ret int32, err error)
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *StatF) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "reportMicMsg":
		var Msg map[StatMicMsgHead]StatMicMsgBody
		err, have = _is.SkipTo(codec.MAP, 1, true)
		if err != nil {
			return err
		}

		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}
		Msg = make(map[StatMicMsgHead]StatMicMsgBody)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {
			var k2 StatMicMsgHead
			var v2 StatMicMsgBody

			err = k2.ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

			err = v2.ReadBlock(_is, 1, false)
			if err != nil {
				return err
			}

			Msg[k2] = v2
		}
		var BFromClient bool
		err = _is.Read_bool(&BFromClient, 2, true)
		if err != nil {
			return err
		}
		if withContext == false {
			_imp := _val.(_impStatF)
			ret, err := _imp.ReportMicMsg(Msg, BFromClient)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impStatFWithContext)
			ret, err := _imp.ReportMicMsg(ctx, Msg, BFromClient)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		}
	case "reportSampleMsg":
		var Msg []StatSampleMsg
		err, have, ty = _is.SkipToNoCheck(1, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			Msg = make([]StatSampleMsg, length, length)
			for i3, e3 := int32(0), length; i3 < e3; i3++ {

				err = Msg[i3].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}
		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}
		}
		if withContext == false {
			_imp := _val.(_impStatF)
			ret, err := _imp.ReportSampleMsg(Msg)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impStatFWithContext)
			ret, err := _imp.ReportSampleMsg(ctx, Msg)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}

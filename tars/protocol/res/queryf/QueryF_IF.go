//
// This file war generated by FastTars2go 1.0
// Generated from QueryF.tars
// Tencent.

package queryf

import (
	"github.com/TarsCloud/TarsGo/tars/protocol/res/endpointf"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"unsafe"
)

type QueryF struct {
	s m.Servant
}

func (_obj *QueryF) FindObjectById(Id string, _opt ...map[string]string) (ret []endpointf.EndpointF, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectById", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err, have, ty = _is.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		ret = make([]endpointf.EndpointF, length, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = ret[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *QueryF) FindObjectById4Any(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectById4Any", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActiveEp) = make([]endpointf.EndpointF, length, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = (*ActiveEp)[i1].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*InactiveEp) = make([]endpointf.EndpointF, length, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*InactiveEp)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *QueryF) FindObjectById4All(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectById4All", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActiveEp) = make([]endpointf.EndpointF, length, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*ActiveEp)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*InactiveEp) = make([]endpointf.EndpointF, length, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*InactiveEp)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *QueryF) FindObjectByIdInSameGroup(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectByIdInSameGroup", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActiveEp) = make([]endpointf.EndpointF, length, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*ActiveEp)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*InactiveEp) = make([]endpointf.EndpointF, length, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*InactiveEp)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *QueryF) FindObjectByIdInSameStation(Id string, SStation string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SStation, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectByIdInSameStation", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActiveEp) = make([]endpointf.EndpointF, length, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*ActiveEp)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*InactiveEp) = make([]endpointf.EndpointF, length, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err = (*InactiveEp)[i8].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}
func (_obj *QueryF) FindObjectByIdInSameSet(Id string, SetId string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(Id, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SetId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(0, "findObjectByIdInSameSet", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(_obj.int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActiveEp) = make([]endpointf.EndpointF, length, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = (*ActiveEp)[i9].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*InactiveEp) = make([]endpointf.EndpointF, length, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err = (*InactiveEp)[i10].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("type not support SIMPLE_LIST.")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not.")
		if err != nil {
			return ret, err
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

func (_obj *QueryF) SetServant(s m.Servant) {
	_obj.s = s
}

func (_obj *QueryF) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

func (_obj *QueryF) byteToInt8(s []byte) []int8 {
	d := *(*[]int8)(unsafe.Pointer(&s))
	return d
}
func (_obj *QueryF) int8ToByte(s []int8) []byte {
	d := *(*[]byte)(unsafe.Pointer(&s))
	return d
}

type _impQueryF interface {
	FindObjectById(Id string) (ret []endpointf.EndpointF, err error)
	FindObjectById4Any(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectById4All(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameGroup(Id string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameStation(Id string, SStation string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameSet(Id string, SetId string, ActiveEp *[]endpointf.EndpointF, InactiveEp *[]endpointf.EndpointF) (ret int32, err error)
}

func (_obj *QueryF) Dispatch(_val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(_obj.int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	_imp := _val.(_impQueryF)
	switch req.SFuncName {
	case "findObjectById":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		ret, err := _imp.FindObjectById(Id)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ret)), 0)
		if err != nil {
			return err
		}
		for _, v := range ret {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	case "findObjectById4Any":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		var ActiveEp []endpointf.EndpointF
		var InactiveEp []endpointf.EndpointF
		ret, err := _imp.FindObjectById4Any(Id, &ActiveEp, &InactiveEp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 2)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ActiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range ActiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.LIST, 3)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(InactiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range InactiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	case "findObjectById4All":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		var ActiveEp []endpointf.EndpointF
		var InactiveEp []endpointf.EndpointF
		ret, err := _imp.FindObjectById4All(Id, &ActiveEp, &InactiveEp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 2)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ActiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range ActiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.LIST, 3)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(InactiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range InactiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameGroup":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		var ActiveEp []endpointf.EndpointF
		var InactiveEp []endpointf.EndpointF
		ret, err := _imp.FindObjectByIdInSameGroup(Id, &ActiveEp, &InactiveEp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 2)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ActiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range ActiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.LIST, 3)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(InactiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range InactiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameStation":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		var SStation string
		err = _is.Read_string(&SStation, 2, true)
		if err != nil {
			return err
		}
		var ActiveEp []endpointf.EndpointF
		var InactiveEp []endpointf.EndpointF
		ret, err := _imp.FindObjectByIdInSameStation(Id, SStation, &ActiveEp, &InactiveEp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 3)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ActiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range ActiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.LIST, 4)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(InactiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range InactiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameSet":
		var Id string
		err = _is.Read_string(&Id, 1, true)
		if err != nil {
			return err
		}
		var SetId string
		err = _is.Read_string(&SetId, 2, true)
		if err != nil {
			return err
		}
		var ActiveEp []endpointf.EndpointF
		var InactiveEp []endpointf.EndpointF
		ret, err := _imp.FindObjectByIdInSameSet(Id, SetId, &ActiveEp, &InactiveEp)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(codec.LIST, 3)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(ActiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range ActiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.LIST, 4)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(InactiveEp)), 0)
		if err != nil {
			return err
		}
		for _, v := range InactiveEp {

			err = v.WriteBlock(_os, 0)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var status map[string]string
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      _obj.byteToInt8(_os.ToBytes()),
		Status:       status,
		SResultDesc:  "",
		Context:      req.Context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}

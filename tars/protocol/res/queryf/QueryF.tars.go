// Package queryf comment
// This file was generated by tars2go 1.1.6
// Generated from QueryF.tars
package queryf

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/endpointf"
	"fmt"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = codec.FromInt8
	_ = unsafe.Pointer(nil)
	_ = bytes.ErrTooLarge
)

// QueryF struct
type QueryF struct {
	servant m.Servant
}

// FindObjectById is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById(id string, opts ...map[string]string) (ret []endpointf.EndpointF, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		ret = make([]endpointf.EndpointF, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = ret[i0].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdWithContext(tarsCtx context.Context, id string, opts ...map[string]string) (ret []endpointf.EndpointF, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		ret = make([]endpointf.EndpointF, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = ret[i1].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdOneWayWithContext(tarsCtx context.Context, id string, opts ...map[string]string) (ret []endpointf.EndpointF, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectById", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4Any is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4Any(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById4Any", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*activeEp)[i2].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*inactiveEp)[i3].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4AnyWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4AnyWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById4Any", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*activeEp)[i4].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*inactiveEp)[i5].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4AnyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4AnyOneWayWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectById4Any", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4All is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4All(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById4All", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*activeEp)[i6].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*inactiveEp)[i7].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4AllWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4AllWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectById4All", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err = (*activeEp)[i8].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = (*inactiveEp)[i9].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectById4AllOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectById4AllOneWayWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectById4All", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameGroup is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameGroup(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameGroup", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err = (*activeEp)[i10].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i11, e11 := int32(0), length; i11 < e11; i11++ {

			err = (*inactiveEp)[i11].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameGroupWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameGroupWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameGroup", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i12, e12 := int32(0), length; i12 < e12; i12++ {

			err = (*activeEp)[i12].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i13, e13 := int32(0), length; i13 < e13; i13++ {

			err = (*inactiveEp)[i13].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameGroupOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameGroupOneWayWithContext(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectByIdInSameGroup", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameStation is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameStation(id string, sStation string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(sStation, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameStation", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i14, e14 := int32(0), length; i14 < e14; i14++ {

			err = (*activeEp)[i14].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i15, e15 := int32(0), length; i15 < e15; i15++ {

			err = (*inactiveEp)[i15].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameStationWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameStationWithContext(tarsCtx context.Context, id string, sStation string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(sStation, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameStation", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i16, e16 := int32(0), length; i16 < e16; i16++ {

			err = (*activeEp)[i16].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i17, e17 := int32(0), length; i17 < e17; i17++ {

			err = (*inactiveEp)[i17].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameStationOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameStationOneWayWithContext(tarsCtx context.Context, id string, sStation string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(sStation, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectByIdInSameStation", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameSet is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameSet(id string, setId string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(setId, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameSet", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i18, e18 := int32(0), length; i18 < e18; i18++ {

			err = (*activeEp)[i18].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i19, e19 := int32(0), length; i19 < e19; i19++ {

			err = (*inactiveEp)[i19].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameSetWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameSetWithContext(tarsCtx context.Context, id string, setId string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(setId, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "findObjectByIdInSameSet", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(resp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	_, ty, err = readBuf.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*activeEp) = make([]endpointf.EndpointF, length)
		for i20, e20 := int32(0), length; i20 < e20; i20++ {

			err = (*activeEp)[i20].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	_, ty, err = readBuf.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*inactiveEp) = make([]endpointf.EndpointF, length)
		for i21, e21 := int32(0), length; i21 < e21; i21++ {

			err = (*inactiveEp)[i21].ReadBlock(readBuf, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// FindObjectByIdInSameSetOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *QueryF) FindObjectByIdInSameSetOneWayWithContext(tarsCtx context.Context, id string, setId string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = buf.WriteString(id, 1)
	if err != nil {
		return ret, err
	}

	err = buf.WriteString(setId, 2)
	if err != nil {
		return ret, err
	}

	err = buf.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*activeEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *activeEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	err = buf.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = buf.WriteInt32(int32(len((*inactiveEp))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *inactiveEp {

		err = v.WriteBlock(buf, 0)
		if err != nil {
			return ret, err
		}

	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	resp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "findObjectByIdInSameSet", buf.ToBytes(), statusMap, contextMap, resp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range resp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range resp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// SetServant sets servant for the service.
func (obj *QueryF) SetServant(servant m.Servant) {
	obj.servant = servant
}

// TarsSetTimeout sets the timeout for the servant which is in ms.
func (obj *QueryF) TarsSetTimeout(timeout int) {
	obj.servant.TarsSetTimeout(timeout)
}

// TarsSetProtocol sets the protocol for the servant.
func (obj *QueryF) TarsSetProtocol(p m.Protocol) {
	obj.servant.TarsSetProtocol(p)
}

type QueryFServant interface {
	FindObjectById(id string) (ret []endpointf.EndpointF, err error)
	FindObjectById4Any(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectById4All(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameGroup(id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameStation(id string, sStation string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameSet(id string, setId string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
}
type QueryFServantWithContext interface {
	FindObjectById(tarsCtx context.Context, id string) (ret []endpointf.EndpointF, err error)
	FindObjectById4Any(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectById4All(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameGroup(tarsCtx context.Context, id string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameStation(tarsCtx context.Context, id string, sStation string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
	FindObjectByIdInSameSet(tarsCtx context.Context, id string, setId string, activeEp *[]endpointf.EndpointF, inactiveEp *[]endpointf.EndpointF) (ret int32, err error)
}

// Dispatch is used to call the server side implement for the method defined in the tars file. withContext shows using context or not.
func (obj *QueryF) Dispatch(tarsCtx context.Context, val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, withContext bool) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	readBuf := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	buf := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "findObjectById":
		var id string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet []endpointf.EndpointF
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectById(id)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectById(tarsCtx, id)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}

			for _, v := range funRet {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}

			for _, v := range funRet {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "findObjectById4Any":
		var id string
		var activeEp []endpointf.EndpointF
		var inactiveEp []endpointf.EndpointF

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectById4Any(id, &activeEp, &inactiveEp)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectById4Any(tarsCtx, id, &activeEp, &inactiveEp)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			err = buf.WriteHead(codec.LIST, 2)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			err = buf.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("activeEp", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("inactiveEp", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet
			rspJson["activeEp"] = activeEp
			rspJson["inactiveEp"] = inactiveEp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "findObjectById4All":
		var id string
		var activeEp []endpointf.EndpointF
		var inactiveEp []endpointf.EndpointF

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectById4All(id, &activeEp, &inactiveEp)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectById4All(tarsCtx, id, &activeEp, &inactiveEp)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			err = buf.WriteHead(codec.LIST, 2)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			err = buf.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("activeEp", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("inactiveEp", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet
			rspJson["activeEp"] = activeEp
			rspJson["inactiveEp"] = inactiveEp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameGroup":
		var id string
		var activeEp []endpointf.EndpointF
		var inactiveEp []endpointf.EndpointF

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectByIdInSameGroup(id, &activeEp, &inactiveEp)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectByIdInSameGroup(tarsCtx, id, &activeEp, &inactiveEp)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			err = buf.WriteHead(codec.LIST, 2)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			err = buf.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("activeEp", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("inactiveEp", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet
			rspJson["activeEp"] = activeEp
			rspJson["inactiveEp"] = inactiveEp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameStation":
		var id string
		var sStation string
		var activeEp []endpointf.EndpointF
		var inactiveEp []endpointf.EndpointF

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&sStation, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

			reqTup.GetBuffer("sStation", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&sStation, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}
			{
				jsonStr, _ := json.Marshal(jsonData["sStation"])
				if err = json.Unmarshal(jsonStr, &sStation); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectByIdInSameStation(id, sStation, &activeEp, &inactiveEp)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectByIdInSameStation(tarsCtx, id, sStation, &activeEp, &inactiveEp)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			err = buf.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			err = buf.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("activeEp", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("inactiveEp", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet
			rspJson["activeEp"] = activeEp
			rspJson["inactiveEp"] = inactiveEp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "findObjectByIdInSameSet":
		var id string
		var setId string
		var activeEp []endpointf.EndpointF
		var inactiveEp []endpointf.EndpointF

		if tarsReq.IVersion == basef.TARSVERSION {

			err = readBuf.ReadString(&id, 1, true)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&setId, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("id", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&id, 0, true)
			if err != nil {
				return err
			}

			reqTup.GetBuffer("setId", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = readBuf.ReadString(&setId, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["id"])
				if err = json.Unmarshal(jsonStr, &id); err != nil {
					return err
				}
			}
			{
				jsonStr, _ := json.Marshal(jsonData["setId"])
				if err = json.Unmarshal(jsonStr, &setId); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(QueryFServant)
			funRet, err = imp.FindObjectByIdInSameSet(id, setId, &activeEp, &inactiveEp)
		} else {
			imp := val.(QueryFServantWithContext)
			funRet, err = imp.FindObjectByIdInSameSet(tarsCtx, id, setId, &activeEp, &inactiveEp)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			err = buf.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

			err = buf.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(activeEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range activeEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("activeEp", buf.ToBytes())

			buf.Reset()
			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = buf.WriteInt32(int32(len(inactiveEp)), 0)
			if err != nil {
				return err
			}

			for _, v := range inactiveEp {

				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}

			}
			rspTup.PutBuffer("inactiveEp", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet
			rspJson["activeEp"] = activeEp
			rspJson["inactiveEp"] = inactiveEp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var statusMap map[string]string
	if status, ok := current.GetResponseStatus(tarsCtx); ok && status != nil {
		statusMap = status
	}
	var contextMap map[string]string
	if ctx, ok := current.GetResponseContext(tarsCtx); ok && ctx != nil {
		contextMap = ctx
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(buf.ToBytes()),
		Status:       statusMap,
		SResultDesc:  "",
		Context:      contextMap,
	}

	_ = readBuf
	_ = buf
	_ = length
	_ = have
	_ = ty
	return nil
}

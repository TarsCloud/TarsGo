//Package StressTest comment
// This file war generated by tars2go 1.1
// Generated from EchoTest.tars
package StressTest

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//EchoTest struct
type EchoTest struct {
	s m.Servant
}

//Echo is the proxy function for the method defined in the tars file, with the context
func (_obj *EchoTest) Echo(SIn []int8, SOut *[]int8, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.SIMPLE_LIST, 1)
	if err != nil {
		return ret, err
	}
	err = _os.WriteHead(codec.BYTE, 0)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SIn)), 0)
	if err != nil {
		return ret, err
	}
	err = _os.Write_slice_int8(SIn)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "echo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SOut) = make([]int8, length, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = _is.Read_int8(&(*SOut)[i0], 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {

		err, _ = _is.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return ret, err
		}
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		err = _is.Read_slice_int8(&(*SOut), length, true)
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	if len(_opt) == 1 {
		for k, _ := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k, _ := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k, _ := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EchoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *EchoTest) EchoWithContext(ctx context.Context, SIn []int8, SOut *[]int8, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.WriteHead(codec.SIMPLE_LIST, 1)
	if err != nil {
		return ret, err
	}
	err = _os.WriteHead(codec.BYTE, 0)
	if err != nil {
		return ret, err
	}
	err = _os.Write_int32(int32(len(SIn)), 0)
	if err != nil {
		return ret, err
	}
	err = _os.Write_slice_int8(SIn)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "echo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*SOut) = make([]int8, length, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = _is.Read_int8(&(*SOut)[i1], 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {

		err, _ = _is.SkipTo(codec.BYTE, 0, true)
		if err != nil {
			return ret, err
		}
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		err = _is.Read_slice_int8(&(*SOut), length, true)
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	if len(_opt) == 1 {
		for k, _ := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k, _ := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k, _ := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *EchoTest) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *EchoTest) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//AddServant adds servant  for the service.
func (_obj *EchoTest) AddServant(imp _impEchoTest, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *EchoTest) AddServantWithContext(imp _impEchoTestWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impEchoTest interface {
	Echo(SIn []int8, SOut *[]int8) (ret int32, err error)
}
type _impEchoTestWithContext interface {
	Echo(ctx context.Context, SIn []int8, SOut *[]int8) (ret int32, err error)
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *EchoTest) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "echo":
		var SIn []int8
		err, have, ty = _is.SkipToNoCheck(1, true)
		if err != nil {
			return err
		}

		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			SIn = make([]int8, length, length)
			for i2, e2 := int32(0), length; i2 < e2; i2++ {

				err = _is.Read_int8(&SIn[i2], 0, false)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SIMPLE_LIST {

			err, _ = _is.SkipTo(codec.BYTE, 0, true)
			if err != nil {
				return err
			}
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			err = _is.Read_slice_int8(&SIn, length, true)
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}
		}
		var SOut []int8
		if withContext == false {
			_imp := _val.(_impEchoTest)
			ret, err := _imp.Echo(SIn, &SOut)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		} else {
			_imp := _val.(_impEchoTestWithContext)
			ret, err := _imp.Echo(ctx, SIn, &SOut)
			if err != nil {
				return err
			}

			err = _os.Write_int32(ret, 0)
			if err != nil {
				return err
			}
		}

		err = _os.WriteHead(codec.SIMPLE_LIST, 2)
		if err != nil {
			return err
		}
		err = _os.WriteHead(codec.BYTE, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(SOut)), 0)
		if err != nil {
			return err
		}
		err = _os.Write_slice_int8(SOut)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	_ = length
	_ = have
	_ = ty
	return nil
}
